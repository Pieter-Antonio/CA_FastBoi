00000C93	//  addi x25 x0 0	addi x25, x0, 0 # input's address starting point in dmem
0A000D13	//  addi x26 x0 160	addi x26, x0, 160 # weight's address starting point in dmem
11800D93	//  addi x27 x0 280	addi x27, x0, 280 # output's address starting point in dmem
00500593	//  addi x11 x0 5	addi x11, x0, 5 # total C loop size
00300613	//  addi x12 x0 3	addi x12, x0, 3 # total K loop size
00400693	//  addi x13 x0 4	addi x13, x0, 4 # total B loop size
00000B13	//  addi x22 x0 0	addi x22, x0, 0 # K loop index starts with 0
00000B93	//  addi x23 x0 0	addi x23, x0, 0 # B loop index starts with 0
00000393	//  addi x7 x0 0	addi x7, x0, 0 # accumation result initilization
08DB8263	//  beq x23 x13 132	B_CHECK: beq x23, x13, B_END
06CB0663	//  beq x22 x12 108	K_CHECK: beq x22, x12, K_END
000CB203	//  ld x4 0(x25)	ld x4, 0(x25) # load 1 input data
000D3283	//  ld x5 0(x26)	ld x5, 0(x26) # load 1 weight data
008CB083	//  ld x1 8(x25)	ld x1, 8(x25) # load 1 input data 2
008D3103	//  ld x2 8(x26)	ld x2, 8(x26) # load 1 weight data 2
02520333	//  mul x6 x4 x5	mul x6, x4, x5 # multiply the input with the weight
006383B3	//  add x7 x7 x6	add x7, x7, x6 # accumulate the result
02208333	//  mul x6 x1 x2	mul x6, x1, x2 # multiply the input with the weight
006383B3	//  add x7 x7 x6	add x7, x7, x6 # accumulate the result
010CB203	//  ld x4 16(x25)	ld x4, 16(x25) # load 1 input data 3
010D3283	//  ld x5 16(x26)	ld x5, 16(x26) # load 1 weight data 3
018CB083	//  ld x1 24(x25)	ld x1, 24(x25) # load 1 input data 4
018D3103	//  ld x2 24(x26)	ld x2, 24(x26) # load 1 weight data 4
02520333	//  mul x6 x4 x5	mul x6, x4, x5 # multiply the input with the weight
006383B3	//  add x7 x7 x6	add x7, x7, x6 # accumulate the result
02208333	//  mul x6 x1 x2	mul x6, x1, x2 # multiply the input with the weight
006383B3	//  add x7 x7 x6	add x7, x7, x6 # accumulate the result
020CB203	//  ld x4 32(x25)	ld x4, 32(x25) # load 1 input data 5
020D3283	//  ld x5 32(x26)	ld x5, 32(x26) # load 1 weight data 5
02520333	//  mul x6 x4 x5	mul x6, x4, x5 # multiply the input with the weight
006383B3	//  add x7 x7 x6	add x7, x7, x6 # accumulate the result
028D0D13	//  addi x26 x26 40	addi x26, x26, 40 # increment weights
001B0B13	//  addi x22 x22 1	addi x22, x22, 1 # K loop index +1
007DB023	//  sd x7 0(x27)	sd x7, 0(x27) # store the output data
00000393	//  addi x7 x0 0	addi x7, x0, 0 # accumation result reset to 0
008D8D93	//  addi x27 x27 8	addi x27, x27, 8 # output's 64-bit word address +1
F99FF0EF	//  jal x1 -104	jal K_CHECK
00000B13	//  addi x22 x0 0	K_END: addi x22, x0, 0 # K loop index restarts with 0
001B8B93	//  addi x23 x23 1	addi x23, x23, 1 # B loop index +1
028C8C93	//  addi x25 x25 40	addi x25, x25, 40 # input's 64-bit word address +5
F88D0D13	//  addi x26 x26 -120	addi x26, x26, -120 # input's 64-bit word address -15
F81FF0EF	//  jal x1 -128	jal B_CHECK
00000013
00000013
00000013
00000013
4000007E // STOP instruction mult4